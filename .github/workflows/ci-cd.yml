name: CI/CD Pipeline
on:
 push:
   branches: [main]
jobs:
 build-and-push:
   runs-on: ubuntu-latest
   steps:
     - name: Checkout repository
       uses: actions/checkout@v3
     - name: Set up QEMU
       uses: docker/setup-qemu-action@v3
     - name: Set up Docker Buildx
       uses: docker/setup-buildx-action@v3
     - name: Login to DockerHub
       uses: docker/login-action@v3
       with:
         registry: docker.io
         username: ${{ secrets.DOCKERHUB_USERNAME }}
         password: ${{ secrets.DOCKERHUB_TOKEN }}
     - name: Build & Push Docker Image (Multi-Arch)
       uses: docker/build-push-action@v6
       with:
         context: ./estimate-app/backend
         file: ./estimate-app/backend/Dockerfile
         push: true
         platforms: linux/amd64,linux/arm64
         tags: |
           qurom/building-estimator-ai:latest
           qurom/building-estimator-ai:${{ github.sha }}
         cache-from: type=gha
         cache-to: type=gha,mode=max
     - name: Set IMAGE env
       run: echo "IMAGE=qurom/building-estimator-ai:${{ github.sha }}" >> $GITHUB_ENV
    #  - name: Set up Node.js
    #    uses: actions/setup-node@v3
    #    with:
    #      node-version: '18'
    #  - name: Install dependencies and build frontend
    #    run: |
    #      cd estimate-app/frontend
    #      npm ci
    #      npm run build
     - name: Build & Push Frontend Image
       uses: docker/build-push-action@v6
       with:
        context: ./estimate-app/frontend
        file: ./estimate-app/frontend/Dockerfile
        push: true
        platforms: linux/amd64
        tags: |
         qurom/building-estimator-frontend:latest
         qurom/building-estimator-frontend:${{ github.sha }}
 
 deploy:
   needs: build-and-push
   runs-on: ubuntu-latest
   steps:
     - name: Checkout repository
       uses: actions/checkout@v3
     - name: Set up SSH
       run: |
         mkdir -p ~/.ssh
         echo "${{ secrets.VPS_KEY }}" > ~/.ssh/id_rsa
         chmod 600 ~/.ssh/id_rsa
         ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

    #  - name: Upload docker-compose.yml to VPS via SCP
    #    uses: appleboy/scp-action@v0.1.3
    #    with:
    #      host: ${{ secrets.VPS_HOST }}
    #      username: ${{ secrets.VPS_USER }}
    #      key: ${{ secrets.VPS_KEY }}
    #      source: docker-compose.yml
    #      target: "/home/${{ secrets.VPS_USER }}/"

     - name: Upload .env to VPS
       run: |
        echo "${{ secrets.BACKEND_ENV }}" | tr -d '\r' | \
        ssh root@160.251.185.191 "cat > /home/${{ secrets.VPS_USER }}/.env"
     - name: SSH into VPS and deploy
       run: |
         ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
           cd /home/${{ secrets.VPS_USER }}
           docker-compose down
           docker-compose pull
           docker-compose up -d
         EOF